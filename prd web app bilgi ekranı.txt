# PRODUCT REQUIREMENTS DOCUMENT (PRD)
# İstanbul Boğazı 3. Posta Bilgilendirme Ekranı - Web Uygulaması

## 1. Project Overview

**Product Name**: İstanbul Boğazı 3. Posta Bilgilendirme Ekranı  
**Platform**: Firebase-hosted React Web Application  
**Target**: Mobile-Only Web App (Strictly Portrait Mode)  
**Users**: 23 active pilot colleagues + 5 spare positions (28 total)  
**Access Model**: Security through obscurity (no authentication required)  
**Primary Use Case**: Mobile access by Istanbul Strait pilots for shift information and protocols  

## 2. Technical Stack Requirements

### 2.1 Core Technologies
- **Framework**: Vite + React (NOT Next.js)
- **Language**: TypeScript (STRICTLY ENFORCED - no JavaScript allowed)
- **Styling**: Tailwind CSS with JIT compiler
- **Data Storage**: Static JSON files (NO Firestore needed - simplicity prioritized)
- **Hosting**: Firebase Hosting with Channels

### 2.2 Development Constraints
- Must be 100% mobile-optimized (portrait mode only)
- No authentication system required
- No sensitive data handling
- Must work on all modern mobile browsers
- **Simplicity prioritized** - minimal dependencies, no unnecessary complexity

## 3. User Interface Requirements

### 3.1 Main Screen Layout

#### 3.1.1 Header Section
- Fixed top header with title "İstanbul Boğazı 3. Posta Bilgilendirme Ekranı"
- Blue background (#1e40af) with white text
- Centered text with appropriate padding
- Font size: 18px (mobile-optimized)

#### 3.1.2 Main Menu Buttons (Primary Navigation)
- **Anlık Gemi Sayıları Button**:
  - Full-width blue button (#2563eb)
  - Ship emoji (🚢) + "Anlık Gemi Sayıları" text
  - Minimum 44px × 44px touch target
  - Links to external URL: `https://script.google.com/macros/s/AKfycby5sVTDpxoTHDbSriD5Qq5-zRFxHD-2qs2zfn5W70VGHl5bVe8M7CtbOPbJqYM6quJ4/exec`

- **Secondary Buttons (Grid Layout)**:
  - Two-column grid for secondary navigation
  - **İzin Yönetimi Button**:
    - Green background (#16a34a)
    - Calendar emoji (📅) + "İzin Yönetimi" text
    - Centered text with appropriate line height
  - **Kılavuz Kaptan Bilgileri Button**:
    - Purple background (#7e22ce)
    - Pilot emoji (✈️) + "Kılavuz Kaptan Bilgileri" text
    - Centered text with appropriate line height
  
- **Tertiary Buttons (Grid Layout)**:
  - Three-column grid for additional features
  - **Vardiya Takvimi Button**:
    - Teal background (#0d9488)
    - Calendar emoji (🗓️) + "Vardiya Takvimi" text
  - **Vardiya Protokolü Button**:
    - Red background (#dc2626)
    - Document emoji (📄) + "Vardiya Protokolü" text
  - **Devlet İkramiyeleri Button**:
    - Orange background (#ea580c)
    - Money emoji (💰) + "Devlet İkramiyeleri" text

#### 3.1.3 Visual Design System
- **Color Scheme**: 
  - Primary: #1e40af (deep blue)
  - Secondary: #16a34a (green for work days)
  - Accent: #eab308 (yellow for today highlight)
  - Background: #f9fafb (light gray)
- **Typography**:
  - System fonts for mobile optimization
  - Appropriate scaling for mobile readability
- **Spacing**:
  - Ample padding for touch targets
  - Consistent spacing between elements

### 3.2 Calendar Component Requirements

#### 3.2.1 Core Functionality
- Monthly calendar view showing shift information
- Current month displayed by default
- Year selector (2025-2027) in header
- Navigation: Previous/Next month buttons
- Mobile swipe support for month navigation

#### 3.2.2 Visual Requirements
- 7-column grid (Sunday through Saturday)
- Day cells: height: min(80px, 14vh); width: calc(100%/7)
- Today's date highlighted with yellow border (2px #eab308)
- Work days with light blue background (#dbeafe)
- Shift numbers displayed as "Vardiya #XX" on work days
- Day numbers displayed prominently
- Empty cells for days outside current month

#### 3.2.3 Data Handling
- Shift calculation based on 61-vardiya cycle
- **Reference Start Point**: January 6, 2026 = Vardiya #1 (from shift_calendar_2025_2027.txt)
- Algorithm: `(currentDate - new Date('2026-01-06')) / (1000 * 60 * 60 * 24) % 61 + 1`
- Reference file: `shift_calendar_2025_2027.txt` for verification only
- Today's date dynamically updated

#### 3.2.4 Component Structure
```typescript
interface CalendarProps {
  initialYear?: number;
  initialMonth?: number;
}

// Must include these internal states:
// - currentYear
// - currentMonth
// - selectedDate (optional)
```

### 3.3 Kılavuz Kaptan Bilgileri Screen

#### 3.3.1 Table Requirements
- 28-row capacity (23 active + 5 spare positions)
- Mobile-optimized table (NO horizontal scrolling)
- Compact design with essential information
- Columns: Sicil No, İsim, Telefon, AIS, Ehliyet, Üniforma, Durum

#### 3.3.2 Mobile Sorting System
- **Long Press Sorting ONLY** (NO additional buttons):
  - 1.5 seconds long press to activate sorting mode
  - Visual feedback: yellow background + shadow on selected row
  - Haptic feedback confirmation
  - "Taşıma Modu Aktif" message display
  - Single tap to place row in new position
  - "Değişiklikleri Kaydet?" confirmation modal
  - **Implementation**: Use react-dnd-touch-backend for mobile-friendly drag & drop

#### 3.3.3 Visual Design
- Alternating row colors for readability
- Compact font size (12-14px) for mobile
- Minimum 44px row height for touch targets
- Icons for status indicators (active/inactive)

### 3.4 Vardiya Protokolü Screen

#### 3.4.1 Content Requirements
- Display content from `Vardiya_Protokol_Maddeleri.txt`
- 37 protocol items (Madde 01-37)
- Search functionality with debounce
- Card-based layout for each protocol item
- Preserved Turkish text formatting

#### 3.4.2 Implementation Requirements
- File location: `/public/data/Vardiya_Protokol_Maddeleri.txt`
- Must NOT be in .gitignore
- Text parsing by "Madde" pattern
- Mobile-optimized scrolling

### 3.5 Devlet İkramiyeleri Screen

#### 3.5.1 Table Requirements
- Two-column table (İkramiye type, Date)
- Header with red background (#fee2e2)
- Clean, readable layout
- Example 
  - Devlet - 1: 24 Ocak 2025
  - Devlet - 2: 24 Mart 2025
  - Devlet - 3: 02 Haziran 2025
  - Devlet - 4: 17 Aralık 2025

## 4. Development Quality & Safety Requirements

### 4.1 TypeScript Enforcement (MANDATORY)
- ALL components MUST be written in TypeScript (.tsx)
- Strict type checking enabled in tsconfig.json
- NO "any" types permitted in production code
- Complete interface definitions for all components
- Type annotations required for all function parameters

**tsconfig.json**:
```json
{
  "compilerOptions": {
    "target": "ES2021",
    "module": "ESNext",
    "jsx": "react-jsx",
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

### 4.2 Testing Requirements
- **Vitest** for unit tests
- **React Testing Library** for component tests
- Minimum 70% test coverage for core components
- Tests MUST include:
  - Component rendering
  - User interactions
  - State changes
  - Edge cases
- CI pipeline must run tests before deployment

### 4.3 Code Quality Standards
- **ESLint** with recommended React rules
- **Prettier** for consistent formatting
- All code MUST pass linting before commit
- No console.log statements in production code
- Required ESLint plugins:
  - eslint-plugin-react
  - @typescript-eslint/eslint-plugin

### 4.4 Project Configuration Files (MUST BE GENERATED EXACTLY)

**.eslintrc.cjs**:
```javascript
module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
    jest: true
  },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier'
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaFeatures: {
      jsx: true
    },
    ecmaVersion: 'latest',
    sourceType: 'module'
  },
  plugins: ['react', '@typescript-eslint', 'prettier'],
  rules: {
    'prettier/prettier': ['error'],
    'react/react-in-jsx-scope': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    'no-console': ['warn']
  },
  settings: {
    react: {
      version: 'detect'
    }
  }
}
```

**prettier.config.js**:
```javascript
module.exports = {
  trailingComma: 'es5',
  tabWidth: 2,
  semi: true,
  singleQuote: false,
  printWidth: 100
};
```

### 4.5 AI Coding Mandates (NON-NEGOTIABLE)
- Claude Code MUST automatically apply TypeScript
- All generated code MUST pass ESLint
- Test files MUST be generated alongside components
- No technical debt accumulation
- All code MUST be mobile-optimized
- **No Firestore complexity** - use static JSON files where possible

## 5. Deployment Process

### 5.1 Firebase Setup
- Firebase project initialization
- Firebase Hosting configuration
- Firebase Hosting Channels for staging

### 5.2 Deployment Workflow
1. **Development**:
   ```bash
   npm run dev
   ```
   
2. **Testing**:
   ```bash
   npm run test
   npm run test:coverage
   ```
   
3. **Production Deployment**:
   ```bash
   npm run build
   firebase deploy
   ```
   
4. **Staging Deployment**:
   ```bash
   npm run build
   firebase hosting:channel:deploy staging
   ```

### 5.3 README Requirements
- Must include clear setup instructions
- Must include development commands
- Must include testing instructions
- Must include deployment process

## 6. File Structure

```
src/
├── components/
│   ├── MainScreen.tsx
│   ├── ShiftCalendar.tsx
│   ├── CaptainInfoTable.tsx
│   ├── ProtocolViewer.tsx
│   └── BonusTable.tsx
├── tests/
│   ├── ShiftCalendar.test.tsx
│   ├── CaptainInfoTable.test.tsx
│   └── ...
├── App.tsx
├── main.tsx
├── index.css
public/
├── index.html
├── data/
│   ├── shift_calendar_2025_2027.json
│   └── Vardiya_Protokol_Maddeleri.txt
firebase.json
package.json
tsconfig.json
.eslintrc.cjs
prettier.config.js
README.md
```

## 7. Mobile-Specific Requirements

### 7.1 Touch & Gesture Support
- Long Press: 1.5 seconds for sorting activation
- Haptic Feedback: For critical interactions
- Touch Targets: Minimum 44px × 44px
- Gesture Prevention: Prevent accidental zoom/scroll

### 7.2 Performance Requirements
- Minimal dependencies (react-dnd-touch-backend for drag & drop)
- Client-side caching for static content
- Optimized asset delivery

### 7.3 User Experience
- One-thumb navigation design
- Clear visual hierarchy with proper spacing
- Immediate feedback for interactions
- Error states with helpful messages
- Visual feedback for all touch interactions

## 8. Acceptance Criteria

1. Mobile-first responsive design working on all modern mobile browsers
2. All components written in TypeScript with proper type definitions
3. Calendar component correctly displaying shift information using January 6, 2026 as reference point
4. Long-press sorting working reliably on mobile with visual feedback
5. Protocol viewer displaying all 37 items correctly from text file
6. All tests passing with minimum 70% coverage
7. Firebase deployment working for both staging and production
8. No console errors in production build
9. Complete README with setup and deployment instructions
10. **Verification Test Cases**:
    - January 6, 2026 must show as Vardiya #1
    - January 7, 2026 must show as Vardiya #1
    - January 8, 2026 must show as Vardiya #1
    - January 12, 2026 must show as Vardiya #2

## 9. Out of Scope

- Landscape mode support
- Authentication system
- User accounts or profiles
- Firestore database implementation
- Complex animations or transitions
- Browser support for legacy browsers
